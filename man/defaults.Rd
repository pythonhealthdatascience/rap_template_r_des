% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/defaults.R
\docType{class}
\name{Defaults}
\alias{Defaults}
\alias{defaults}
\alias{get_param}
\title{R6 class returning list of default model parameters}
\usage{
defaults()

get_param(param_class)
}
\arguments{
\item{param_class}{Instance of the Defaults parameter class.}
}
\description{
`Defaults` is an R6 class instead of a function because this allows us to
return a list whilst also having functionality which only allows
modification of existing attributes, and not the addition of new attributes.
This helps avoid an error where a parameter appears to have been changed,
but remains the same as the attribute name used was incorrect.

The returned list contains the following parameters:

\itemize{
  \item \code{patient_inter}: Mean inter-arrival time between patients
  in minutes.
  \item \code{mean_n_consult_time}: Mean nurse consultation time in
  minutes.
  \item \code{number_of_nurses}: Number of available nurses (integer).
  \item \code{data_collection_period}: Duration of data collection
  period in minutes.
  \item \code{number_of_runs}: Number of simulation runs (integer).
  \item \code{scenario_name}: Label for the scenario (int|float|string).
  \item \code{cores}: Number of cores to use for parallel execution
  (integer).
  \item \code{verbose}: Whether to print activity information (logical).
}

`defaults()` is a wrapper which enables us to create a new instance of
the class without needing to run `Defaults[["new"]]()` every time.

`get_param()` is a wrapper which enables us to extract the list of
parameters from the class more easily. For example, if we create
`param_class <- defaults()`, we can then run `get_param(param_class)`
instead of `param_class[["get]]()`.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Defaults-new}{\code{Defaults$new()}}
\item \href{#method-Defaults-get}{\code{Defaults$get()}}
\item \href{#method-Defaults-update}{\code{Defaults$update()}}
\item \href{#method-Defaults-clone}{\code{Defaults$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Defaults-new"></a>}}
\if{latex}{\out{\hypertarget{method-Defaults-new}{}}}
\subsection{Method \code{new()}}{
Initialises the R6 object, setting the allowed keys based on the
defaults.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Defaults$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Defaults-get"></a>}}
\if{latex}{\out{\hypertarget{method-Defaults-get}{}}}
\subsection{Method \code{get()}}{
Retrieves the current list of default parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Defaults$get()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Defaults-update"></a>}}
\if{latex}{\out{\hypertarget{method-Defaults-update}{}}}
\subsection{Method \code{update()}}{
Update the defaults list with new values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Defaults$update(new_values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_values}}{A named list containing the parameters to be updated.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Defaults-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Defaults-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Defaults$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
